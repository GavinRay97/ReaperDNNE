//
// Auto-generated by dnne-gen
//
// .NET Assembly: ReaperDNNE
//

//
// Declare exported functions
//
#ifndef __DNNE_GENERATED_HEADER_REAPERDNNE__
#define __DNNE_GENERATED_HEADER_REAPERDNNE__

#include <stddef.h>
#include <stdint.h>
#include <dnne.h>

//
// Additional code provided by user
//

      struct reaper_plugin_info_t
      {
        int caller_version;
        void* hwnd_main;
        int (*Register)(const char* name, void* infostruct);
        void* (*GetFunc)(const char* name);
      };
    

// Computed from ReaperDNNE.MyReaperPlugin.ReaperPluginEntry
DNNE_API int32_t DNNE_CALLTYPE ReaperPluginEntry(intptr_t hInstance, struct reaper_plugin_info_t* rec);

#endif // __DNNE_GENERATED_HEADER_REAPERDNNE__

//
// Define exported functions
//
#ifdef DNNE_COMPILE_AS_SOURCE

#ifdef DNNE_WINDOWS
    #ifdef _WCHAR_T_DEFINED
        typedef wchar_t char_t;
    #else
        typedef unsigned short char_t;
    #endif
#else
    typedef char char_t;
#endif

//
// Forward declarations
//

extern void* get_callable_managed_function(
    const char_t* dotnet_type,
    const char_t* dotnet_type_method,
    const char_t* dotnet_delegate_type);

extern void* get_fast_callable_managed_function(
    const char_t* dotnet_type,
    const char_t* dotnet_type_method);

//
// String constants
//

static const char_t* t1_name = DNNE_STR("ReaperDNNE.MyReaperPlugin, ReaperDNNE");

//
// Exports
//

// Computed from ReaperDNNE.MyReaperPlugin.ReaperPluginEntry
static int32_t (DNNE_CALLTYPE* ReaperPluginEntry_ptr)(intptr_t hInstance, struct reaper_plugin_info_t* rec);
DNNE_API int32_t DNNE_CALLTYPE ReaperPluginEntry(intptr_t hInstance, struct reaper_plugin_info_t* rec)
{
    if (ReaperPluginEntry_ptr == NULL)
    {
        const char_t* methodName = DNNE_STR("ReaperPluginEntry");
        ReaperPluginEntry_ptr = get_fast_callable_managed_function(t1_name, methodName);
    }
    return ReaperPluginEntry_ptr(hInstance, rec);
}

#endif // DNNE_COMPILE_AS_SOURCE
